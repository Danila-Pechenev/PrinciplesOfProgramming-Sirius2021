Задачи по курсу «Принципы программирования» (Сириус-2021)
Общая информация
●	Формулировки задач намеренно написаны так, чтобы оставлять простор возможностей для реализации. Любые расширения постановок задач активно приветствуются. Уточнение постановки задачи считается частью решения.
●	Решения можно писать на любом языке программирования.
●	Интерфейс программ (порядок взаимодействия с ними) определяется самостоятельно, однако следует придерживаться основного принципа — пользователю должно быть удобно.
●	Все входные данные во всех задачах следует получать либо из файлов, либо из параметров командной строки. Консольный ввод не допускается. Результаты можно либо выводить на консоль, либо сохранять в файлы.
●	Форматы входных данных и результатов определяются самостоятельно. Решение должно содержать примеры файлов соответствующих форматов. 
●	Решение о разбиении на функции и другие компоненты применяется самостоятельно.
●	Код программ должен быть понятным читателю, компоненты кода и сложные места в алгоритмах должны сопровождаться комментариями.
●	Все программы (и их отдельные компоненты) должны быть тщательно протестированы (с точки зрения реализуемой функциональности и методами модульного тестирования).
●	Решение должно сопровождаться документацией (файл README.md в корне проекта), содержащей:
○	имя автора решения;
○	конкретизированную постановку задачи;
○	описание порядка использования программы;
○	форматы входных данных и результатов.
●	Решения оцениваются в соответствии с критериями.
Порядок работы
●	Для решения каждой задачи создаётся новый закрытый репозиторий на сайте github.com.
●	В репозитории создаётся ветка dev, вся разработка ведётся именно в ней.
●	Этапы решения оформляются отдельными коммитами, причём из сообщений коммитов должно быть понятно, что именно на этом этапе делалось.
●	Коммиты должны быть разумно гранулированы (решение в один коммит вряд ли может отразить весь процесс решения задачи, но и оформлять каждую новую строчку кода коммитом не следует).
●	По готовности решения создаётся пулл-реквест из ветки dev на ветку main (master), доступ к репозиторию открывается преподавателю (bravit) и он же назначается ревьюером на пулл-реквест.
Условия задач
Задача 1: сравнение наборов отрезков на плоскости
Имеются два набора отрезков на плоскости, заданных координатами начал и концов. Отрезки в одном наборе могут накладываться друг на друга полностью или частично. Два набора называются поточечно эквивалентными, если совпадают множества точек, находящихся на отрезках каждого из наборов (то есть совпадают изображения наборов, если нарисовать их на плоскости). К примеру, набор из двух отрезков (0,0) – (0, 1) и (0, 1) – (0, 2) поточечно эквивалентен набору из одного отрезка (0,0) – (0, 2). Необходимо проверить, являются ли два заданных набора поточечно эквивалентными.
Задача 2: поиск слов в контексте
Дан текстовый файл, содержащий текст свободного формата на русском языке, и некоторое слово. Необходимо найти всех вхождения этого слова или любых его словоформ (словарь словоформ) и вывести их в контексте (вместе с двумя словами до и двумя словами после, а также номером строки в файле), игнорируя знаки препинания и переводы строк. В качестве файлов для тестирования решения отлично подходят текстовые файлы с сайта lib.ru.
Задача 3: нормальные алгорифмы
Нормальные алгорифмы — это модель вычислений, то есть один из способов формально определить понятие вычисления наряду с машинами Тьюринга, лямбда-исчислением и многими другими. В этой задаче требуется реализовать вычисление нормального алгорифма по заданной схеме алгорифма и начальному слову. Желательна также поддержка пакетного режима работы, когда можно подать на вход программе сразу много схем или начальных слов для одной схемы и получить все результаты.
Задача 4: моделирование движения лифта
Лифт в многоэтажном доме двигается в ответ на запросы, генерируемые при нажатии кнопок вызова лифта и кнопок требуемого этажа. Необходимо разработать дискретную (посекундную) модель лифта, которая в ответ на заданную последовательность запросов (текущая секунда, этаж вызова, требуемый этаж) возвращает информацию о местонахождении лифта в каждую секунду времени работы модели вплоть до завершения обслуживания всех вызовов. Можно считать, что перемещение между этажами и остановка на этаже всегда выполняются за фиксированное количество секунд. Открытие и закрытие дверей можно исключить из модели. Моделирование можно начинать с нулевой секунды.